// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema


// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


generator client {
  provider = "prisma-client-js"
}


generator dbml {
  provider = "prisma-dbml-generator"
}


datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model employee {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @map("id") @db.Uuid // References auth.users.id
  email       String
  role        String
  last_name   String
  first_name  String
  middle_name String?
  status      String


  @@map("employee") // Optional: specify the exact name of the table if it differs
}




//INVENTORY


model back_inventory {
  bd_id                   Int               @id @default(autoincrement())
  item_id                 Int
  pd_id                   Int
  pi_id                   Int?        
  stock_in_date           DateTime?
  stock_out_date          DateTime?
  stock_damaged           Int
  stock_used              Int
  purchased_item          purchased_item?   @relation(fields: [pi_id], references: [pi_id])
  purchased_detail        purchased_detail? @relation(fields: [pd_id], references: [pd_id])
  inventory_shelf         inventory_shelf[]
  createdAt               DateTime          @default(now())
  updatedAt               DateTime          @updatedAt
  inventory_tracking      inventory_tracking[]
}


model purchased_item {
  pi_id            Int                @id @default(autoincrement())
  receipt_no       Int
  supplier_id      Int
  purchase_date    DateTime           @default(now())
  purchased_detail purchased_detail[]
  supplier         supplier           @relation(fields: [supplier_id], references: [supplier_id])
  back_inventory   back_inventory[]
  createdAt        DateTime           @default(now())
}


model purchased_detail {
  pd_id                      Int                        @id @default(autoincrement())
  pi_id                      Int
  item_id                    Int
  quantity                   Int
  unit_id                    Int
  category_id                Int
  price                      Float
  expiry_date                DateTime?
  purchased_item             purchased_item             @relation(fields: [pi_id], references: [pi_id])
  item                       item                       @relation(fields: [item_id], references: [item_id])
  unit                       unit                       @relation(fields: [unit_id], references: [unit_id])
  category                   category                   @relation(fields: [category_id], references: [category_id])
  back_inventory             back_inventory[]
  processed_purchase_details ProcessedPurchaseDetails[]
  createdAt                  DateTime                   @default(now())
}


model ProcessedPurchaseDetails {
  ppd_id           Int              @id @default(autoincrement())
  pd_id            Int              @unique
  processed_at     DateTime         @default(now())
  purchased_detail purchased_detail @relation(fields: [pd_id], references: [pd_id])
}


model unit {
  unit_id          Int                @id @default(autoincrement())
  unit_name        String
  item             item[]
  purchased_detail purchased_detail[]
  inventory_shelf inventory_shelf[]
  inventory_tracking inventory_tracking[]
}


model category {
  category_id   Int    @id @default(autoincrement())
  category_name String
  item          item[]
  purchased_detail purchased_detail[]
}


model shelf_location {
  sl_id   Int    @id @default(autoincrement())
  sl_name String
  inv_type String
  inventory_shelf inventory_shelf[]
  source_shelf inventory_tracking[] @relation("SourceShelf")
  destination_shelf inventory_tracking[] @relation("DestinationShelf")


  @@map("shelf_location")
}


model inventory_shelf {
  is_id   Int    @id @default(autoincrement())
  bd_id  Int
  sl_id  Int
  quantity Int
  unit_id Int
  hidden      Boolean  @default(false)
  shelf_location shelf_location @relation(fields: [sl_id], references: [sl_id])
  unit unit @relation(fields: [unit_id], references: [unit_id])
  back_inventory back_inventory @relation(fields: [bd_id], references: [bd_id])
  @@unique([bd_id, sl_id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // ProductInventory ProductInventory[]
}


model item {
  item_id          Int                @id @default(autoincrement())
  item_name        String
  description      String
  unit_id          Int
  category_id      Int
  unit             unit               @relation(fields: [unit_id], references: [unit_id])
  category         category           @relation(fields: [category_id], references: [category_id])
  purchased_detail purchased_detail[]
  createdAt        DateTime           @default(now())
  ProductInventory ProductInventory[]
}


model supplier {
  supplier_id   Int    @id @default(autoincrement())
  supplier_name String
  contact_no    String?
  address       String
  purchased_item purchased_item[]
}


model inventory_tracking {
  id                   Int               @id @default(autoincrement())
  bd_id                Int
  quantity             Int
  source_shelf_id      Int?
  destination_shelf_id Int?
  unit_id              Int
  payment_id           Int?
  date_moved           DateTime          @default(now())
  action               String
  back_inventory       back_inventory    @relation(fields: [bd_id], references: [bd_id])
  source_shelf         shelf_location?    @relation("SourceShelf", fields: [source_shelf_id], references: [sl_id])
  destination_shelf    shelf_location ?   @relation("DestinationShelf", fields: [destination_shelf_id], references: [sl_id])
  payment              payment?           @relation(fields:[payment_id], references: [payment_id])
  unit                 unit              @relation(fields: [unit_id], references: [unit_id])
}


//PRODUCT


model product {
  product_id      Int               @id @default(autoincrement())
  category        String
  product_name    String
  type            String?
  hotPrice        Float
  icedPrice       Float
  frappePrice     Float
  singlePrice     Float
  status          String
  description     String
  image_url       String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  order_details   order_details[]
  // ProductOrderDetails ProductOrderDetails[] (!!!!for many-to-many relation)


  ProductInventory ProductInventory[]
}


model ProductInventory {
  id              Int              @id @default(autoincrement())
  product_id      Int
  item_id         Int
  // inventory_shelf_id Int
  required_quantity Int              // Quantity needed for product
  product         product           @relation(fields: [product_id], references: [product_id])
  item            item              @relation(fields: [item_id], references: [item_id])
  // inventory_shelf inventory_shelf   @relation(fields: [inventory_shelf_id], references: [is_id])

<<<<<<< HEAD

  @@unique([product_id, inventory_shelf_id])
=======
  // @@unique([product_id, item_id, inventory_shelf_id])
  @@unique([product_id, item_id])
>>>>>>> 6c2cd4f6c4b8d97180acf025cfb0e637ee0f3a1f
}




//ORDER


model order {
  order_id      Int             @id @default(autoincrement())
  customer_name String
  service_type  String
  date          DateTime        @default(now())
  order_details order_details[]
  payment       payment?        // Relation to payment (one-to-one relationship)
}


model order_details {
  orderDetails_id Int     @id @default(autoincrement())
  order_id        Int
  product_id      Int
  price           Float
  quantity        Int
  date            DateTime @default(now())
  order           order   @relation(fields: [order_id], references: [order_id])
  product         product @relation(fields: [product_id], references: [product_id])
  // ProductOrderDetails ProductOrderDetails[]
}


// model ProductOrderDetails {
//   product_id Int
//   orderDetails_id Int
//   product product @relation(fields: [product_id], references: [product_id])
//   order_details order_details @relation(fields: [orderDetails_id], references: [orderDetails_id])


//   @@id([product_id, orderDetails_id])
// }


//PAYMENT


model payment {
  payment_id      Int       @id @default(autoincrement())
  payment_method  String
  payment_status  String    // e.g., pending, succeeded, failed
<<<<<<< HEAD
 
=======
  
>>>>>>> 6c2cd4f6c4b8d97180acf025cfb0e637ee0f3a1f
  //e-wallet
  reference_no    String?
  //card
  account_number  String?
  account_name    String?
  cvv             String?
  expiry_date     DateTime?
  //otc
  amount          Float?
  change          Float?

<<<<<<< HEAD

=======
>>>>>>> 6c2cd4f6c4b8d97180acf025cfb0e637ee0f3a1f
  discount_id     Int?      // Relation to the associated discount
  order_id        Int?      @unique // Make order_id unique to satisfy one-to-one relation
  generated_code  String
  createdAt       DateTime  @default(now())


<<<<<<< HEAD


=======
>>>>>>> 6c2cd4f6c4b8d97180acf025cfb0e637ee0f3a1f
  // pm_eWallet_id   Int?      @unique
  // pm_otc_id       Int?      @unique
  // pm_card_id      Int?      @unique
  order           order?    @relation(fields: [order_id], references: [order_id])
  discount        discount? @relation(fields: [discount_id], references: [discount_id])
<<<<<<< HEAD
=======
  inventory_tracking  inventory_tracking[]
>>>>>>> 6c2cd4f6c4b8d97180acf025cfb0e637ee0f3a1f
  // eWallet payment_method_eWallet? @relation(fields: [pm_eWallet_id], references: [p_method_id])
  // otc payment_method_otc?     @relation(fields: [pm_otc_id], references: [p_method_id])
  // card payment_method_card? @relation(fields: [pm_card_id], references: [p_method_id])
}


model discount {
  discount_id   Int       @id @default(autoincrement())
  discount_name String
  discount_rate Float
  status        String
  payment       payment[]
}


// model payment_method_eWallet {
//   p_method_id  Int      @id @default(autoincrement())
//   mode         String
//   reference_no String
//   payment      payment? 
// }


// model payment_method_otc {
//   p_method_id Int      @id @default(autoincrement())
//   mode        String
//   amount      Float
//   change      Float
//   payment     payment?
// }

<<<<<<< HEAD

=======
>>>>>>> 6c2cd4f6c4b8d97180acf025cfb0e637ee0f3a1f
// model payment_method_card {
//   p_method_id Int      @id @default(autoincrement())
//   account_number String
//   account_name String
//   cvv String
//   expiry_date DateTime
//   payment     payment?
// }

<<<<<<< HEAD

=======
>>>>>>> 6c2cd4f6c4b8d97180acf025cfb0e637ee0f3a1f
//SALES


model product_sales {
  sales_id        Int      @id @default(autoincrement())
  orderDetails_id Int      @unique
  product_sold    Int
  total_sales     Float
  date            DateTime
}
